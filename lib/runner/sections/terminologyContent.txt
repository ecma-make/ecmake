{bold makefile}: The {italic makefile} defines the {italic tasks}. The {italic default} name is {bold ecmakefile.js}. It is a pure ecma module.

{bold runner}: The main job of the {bold ecmake} command line tool is to run the selected {italic target}.

{bold model}: The makefile defines a data model. It consists of a {italic task tree} and assigned {italic callback functions}.

{bold callback}: To each task a callback function can be assigned by the {bold will()} method. It holds the instructions to be executed by the task.

{bold promise}: A callback can return a {bold Promise} to be able to do asynchronous jobs.

{bold task tree}: The tasks are organized as a tree, not as a list.It as a mere container of callbacks and does not reflect any dependencies between them. {italic See: dependency}

{bold root}: The {italic root node} is to be exported by the {italic makefile} as access point for the {italic runner}.

{bold leaf}: The {italic leaf nodes} typically hold the {italic callback functions}, but you are free to assign them to {italic inner nodes}, too.

{bold task}: Technically every node in the tree is an object of the class {italic Task} from the root down to the leaves. It may hold a callback or not.

{bold target}: The {bold target} is the {italic task}, that you select on the command line to be executed.

{bold result of a task}: You {bold CAN} return a {bold result} from a callback, which will then become the {italic result of the task}. If it does {underline asynchronous} stuff, you {bold MUST} return a {underline {italic Promise}} from the callback. The promise {bold CAN} {italic resolve} with a result itself, which will in turn become the {italic result of the task}.

{bold result access}: The result of a task is accessible by the {bold result} property of the task as soon as the internal {italic Promise} is solved. Inside the callbacks of dependent tasks it is addressable via the task tree.

{bold dependency}: The dependencies are declared by use of the {bold awaits()} method of a task.

{bold order of execution}: The promises of all dependencies are solved before a callback is executed. The {bold results} of the dependencies are ready to be used. In short, it works as you would expect it to work.

{bold parallel execution}: Tasks may be executed in parallel, if there is no dependency.

{bold race condition}: If conflicts pop up due to race conditions of two tasks, you solve this by declaring a dependency to make sure they are executed in a timely order.
